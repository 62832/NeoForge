--- a/net/minecraft/network/Connection.java
+++ b/net/minecraft/network/Connection.java
@@ -97,6 +97,7 @@
    private volatile Component delayedDisconnect;
    @Nullable
    BandwidthDebugMonitor bandwidthDebugMonitor;
+   private java.util.function.Consumer<Connection> activationHandler;
 
    public Connection(PacketFlow p_129482_) {
       this.receiving = p_129482_;
@@ -107,6 +108,7 @@
       super.channelActive(p_129525_);
       this.channel = p_129525_.channel();
       this.address = this.channel.remoteAddress();
+      if (activationHandler != null) activationHandler.accept(this);
       if (this.delayedDisconnect != null) {
          this.disconnect(this.delayedDisconnect);
       }
@@ -371,7 +373,7 @@
       if (this.address == null) {
          return "local";
       } else {
-         return p_295875_ ? this.address.toString() : "IP hidden";
+         return p_295875_ ? net.minecraftforge.network.DualStackUtils.getAddressString(this.address) : "IP hidden";
       }
    }
 
@@ -410,6 +412,8 @@
    }
 
    public static ChannelFuture connect(InetSocketAddress p_290034_, boolean p_290035_, final Connection p_290031_) {
+      net.minecraftforge.network.DualStackUtils.checkIPv6(p_290034_.getAddress());
+      p_290031_.activationHandler = net.minecraftforge.network.NetworkHooks::registerClientLoginChannel;
       Class<? extends SocketChannel> oclass;
       EventLoopGroup eventloopgroup;
       if (Epoll.isAvailable() && p_290035_) {
@@ -466,6 +470,7 @@
 
    public static Connection connectToLocalServer(SocketAddress p_129494_) {
       final Connection connection = new Connection(PacketFlow.CLIENTBOUND);
+      connection.activationHandler = net.minecraftforge.network.NetworkHooks::registerClientLoginChannel;
       new Bootstrap().group(LOCAL_WORKER_GROUP.get()).handler(new ChannelInitializer<Channel>() {
          @Override
          protected void initChannel(Channel p_129557_) {
@@ -558,6 +563,14 @@
 
    public float getAverageSentPackets() {
       return this.averageSentPackets;
+   }
+
+   public Channel channel() {
+      return this.channel;
+   }
+
+   public PacketFlow getDirection() {
+      return this.receiving;
    }
 
    public void setBandwidthLogger(SampleLogger p_299187_) {
